<% layout('/layout/boilerplate.ejs') %>

<style>
.date-time-section {
  margin-bottom: 20px;
}
.date-group{
  justify-content: center;
}

.date-group,
.time-group {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.date-group label,
.time-group label {
  margin-right: 10px;
}

.start,
.end {
  margin-right: 20px;
}

/* Notes Section */


 

  .custom-input-group {
    display: flex;
    flex-direction: column;
  }
  
  .date-group,
  .time-group {
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  
  .date-group label,
  .time-group label {
    margin-right: 10px;
  }
  
  .start,
  .end {
    margin-right: 20px;
  }
  
  #noteTitle,
  #noteContent,
  #saveNote {
    margin-top: 10px;
  }
  
  body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f5f5f5;
  }
  #noteTiztle{
    border: none;
    position: relative;
    left : 6px;
    gap: 10px;
  }
  #notepad {
    padding-top: 5px;
    width: 90%;
    margin: 20px auto;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 8px;
    height: 129px;
    position: relative;
    z-index: 2; /* Ensure note stays above todo */
  }
  #notes-section{
    padding-top: 5px;
    width: 90%;
    margin: 20px auto;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 8px;
  }

  input#noteTitle {
    width: 100%;
    margin-bottom: 10px;
    padding: 10px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
    border: none;
    font-size: 16px;
  }

  input#noteTitle:focus {
    outline: none;
  }

  textarea {
    width: 100%;
    min-height: 437px;
    padding: 10px;
    box-sizing: border-box;
    border-radius: 4px;
    margin-bottom: 10px;
    resize: none;
    border: none;
    font-size: 14px;
  }

  textarea:focus {
    outline: none;
  }

  button {
    background-color: #3498db;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
  }

  button:hover {
    background-color: #2980b9;
  }

  
  /* TODO */
  
  
  .todo {
    justify-content: center;
    display: flex;
    position: relative;
    z-index: 1;  
  }
  .todo-item {
    display: flex;
    align-items: center;
  }

  .button-group {
    margin-left: 20px;
    display: flex;
    align-items: center;
  }

  .custom-todo-container {
      max-width: 400px;
      margin: 50px auto;
      text-align: center;
  }

  .custom-list-item {
          margin-bottom: 10px;
      padding: 15px;
      background-color: #fff;
      border: 1px solid #d6d6d6;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      transition: border-color 0.3s;
  }

  .custom-delete-btn,
  .custom-edit-btn,
  .custom-check-input {
      border: none;
      padding: 0.3rem 0.7rem;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 14px;
  }

  .custom-delete-btn {
      background-color: #dc3545;
      color: #fff;
  }

  .custom-edit-btn {
      background-color: #007bff;
      color: #fff;
  }

  .custom-check-input {
      right: 89px;
      appearance: none;
      position: relative;
      width: 20px;
      height: 20px;
      background-color: #fff;
      border: 1px solid #007bff;
      border-radius: 4px;
      margin-right: 10px;
      cursor: pointer;
      outline: none;
      transition: background-color 0.3s;
      display: inline-block;
      vertical-align: middle;
  }

  .custom-check-input:checked {
      background-color: #007bff;
  }

  .custom-check-mark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: #fff;
      border: 2px solid #007bff;
      display: none;
  }

  .custom-cross-logo {
      cursor: pointer;
      color: #dc3545;
      font-size: 18px;
      position: absolute;
      top: 50%;
      left: 79%;
      transform: translate(-50%, -50%);
      display: none;
  }

  .custom-list-item:hover {
      border-color: #007bff;
  }

  .custom-list-item.complete .custom-check-mark {
      display: block;
  }

  .custom-list-item:hover .custom-cross-logo {
      display: block;
  }

  .custom-input-group {
      height: 115px;
      margin-top: 15px;
      margin-bottom: 15px;
      display: flex;
      flex-direction: column;
      align-items: center;
      
  }

  .custom-todotext {
      flex: 1;
      width: 22rem;
      border: none;
      border-bottom: 1px solid #d6d6d6;
      margin-bottom: 10px;
      padding: 5px;
      font-size: 14px;
  }

  .custom-todotext:focus {
      outline: none;
      border-bottom: 1px solid #007bff;
  }

  .custom-date-time-input {
      margin-left: 2rem;
      width: 22rem;
      border: none;
      border-bottom: 1px solid #d6d6d6;
      margin-bottom: 10px;
      padding: 5px;
      font-size: 14px;
  }

  .custom-edit-btn,
  .custom-add-btn {
      margin-left: auto;
  }
  .custom-edit-all-btn {
      left: 95px;
      position: relative;
      background-color: #007bff;
      color: #fff;
      margin-bottom: 15px;
      padding: 0.3rem 0.7rem;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 14px;
  }

  .custom-time-date-group {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
  }

  @media (max-width: 1000px) {
      .custom-cross-logo {
          display: block;
          left: 70%;
      }
      .custom-todotext{
          width: 15rem;
      }
      .custom-date-time-input {
          width: 15rem;
      }
  }
  .custom-time-left {
      font-size: 12px;
      margin-bottom: 0;
      margin-top: 0;
      display: block;
      color: #222222;
      margin-left: auto;
  }
  
  .list-group-item {
      display: block !important;
      width: 350px !important;
  }
  .todotext{
      display: inline-block;
      margin-left: 20px;
      text-align: left;
      margin-bottom: 20px;
  }
  .custom-not-completed {
      color: red;
      position: relative;
      font-size: 10px;
  }
  .custom-completed {
    position: relative;
    font-size: 10px;
    right: 75px;
    color: rgb(15, 194, 15);
  }
  .custom-time-date-group{
    margin-right: 20px;
  }
  .custom-time-btn{
    margin-left: 20px;
    margin-right: 20px;
  }
  .custom-list-item{
    background: #575656!important;
    color: #fff;
  }
  .custom-existing-notes {
    position: relative;
  }

  .blur-background {
    filter: blur(5px); /* Adjust the blur intensity as needed */
    pointer-events: none; /* Prevent interaction with blurred elements */
  }

  #existingNotes {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); /* Add a shadow for better visibility */
    z-index: 1000; /* Ensure it's above other content */
  }

  .text-align-existing {
    text-align: center;
  }

  .custom-editbtn{
    background: green !important;
    border: none !important;
    border-radius: 12px;
    padding: 5px 10px;
    color: white;
    cursor: pointer;
    margin-top: 20px;
  }
  .custom-editbtn:hover{
    background: rgb(0, 255, 0) !important;
    border: none !important;
    border-radius: 12px;
    padding: 5px 10px;
    color: white;
    cursor: pointer;
    margin-top: 20px;
  }
  .button-container {
    display: flex;
    gap: 10px; 
  }
  .ccompletebtn {
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: -50px;
    background: blue!important;
  }
  .slide {
    flex: 0 0 auto;
    margin-right: 20px;
    padding: 10px;
    background-color: #2c3e50; /* Use a dark background color */
    color: white;
    border-radius: 10px;
    width: 200px; 
    margin-bottom: 20px;
  }
  .slider {
    display: flex;
    overflow-x: auto;
    scrollbar-width: none; 
    -ms-overflow-style: none;  
  }
  .slider::-webkit-scrollbar {
    display: none 
  }
  .text-align-existing{
    text-align: center;
  }
  .close-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    color: #333;
    cursor: pointer;
    font-size: 20px;
    z-index: 10000;
  }
</style>
<body>

<% if (existingNotes && existingNotes.length > 0) { %>
  <div class="custom-existing-notes">
    <button class="close-btn" id="_close">✖️</button>
    <div id="notepad" class="<%= existingNotes && existingNotes.length > 0 ? 'blur-background' : '' %>">
      <form action="/user/${req.user._id}" method="POST" class="note-form form form-inline form-group">
        <div class="custom-input-group mb-3">
          <div class="date-time-section">
            <div class="time-group">
              <div class="start">
                <label for="startTimeInput">Start Date and Time:</label>
                <input type="datetime-local" required id="startTimeInput" class="form-control-lg custom-date-time-input" name="startTime" placeholder="HH:MM" aria-label="Todo Start Time">
              </div>
              <div class="end">
                <label for="endTimeInput">End Date and Time:</label>
                <input type="datetime-local" required id="endTimeInput" class="form-control-lg custom-date-time-input" name="endTime" placeholder="HH:MM" aria-label="Todo End Time">
              </div>
            </div>
          </div>
        </div>
        <div class="notes-section" id="notes-section">
          <input type="text" id="noteTitle" placeholder="Enter the title..." name="title">
          <textarea id="noteContent" placeholder="Start typing your note..." name="note"></textarea>
        </div>
        <button id="saveNote">Save</button>
      </form>
    </div>
    <div id="existingNotes">
      <h2 class="text-align-existing">Existing Notes:</h2>
      <div class="slider">
          <% existingNotes.forEach((note) => { %>
            <div class="slide">
              <h5 style="text-align: center"><%= note.title %></h5>
              <div class="button-container">
                <button class="custom-editbtn" data-note-id="<%= note._id %>">Edit</button>
                <form action="/user/note/<%= note._id %>/completed" method="POST">
                  <button class="btn btn-success ccompletebtn">Complete</button>
                </form>
              </div>
            </div>
          <% }); %>
      </div>
    </div>
  </div>
    <% }else{ %>
      <div id="notepad">
        <form action="/user/${req.user._id}" method="POST" class="note-form form form-inline form-group">
          <div class="custom-input-group mb-3">
            <div class="date-time-section">
              <div class="time-group">
                <div class="start">
                  <label for="startTimeInput">Start Date and Time:</label>
                  <input type="datetime-local" required id="startTimeInput" class="form-control-lg custom-date-time-input" name="startTime" placeholder="HH:MM" aria-label="Todo Start Time">
                </div>
                <div class="end">
                  <label for="endTimeInput">End Date and Time:</label>
                  <input type="datetime-local" required id="endTimeInput" class="form-control-lg custom-date-time-input" name="endTime" placeholder="HH:MM" aria-label="Todo End Time">
                </div>
              </div>
            </div>
          </div>
          <div class="notes-section" id="notes-section">
            <input type="text" id="noteTitle" placeholder="Enter the title..." name="title">
            <textarea id="noteContent" placeholder="Start typing your note..." name="note"></textarea>
          </div>
          <button id="saveNote">Save</button>
        </form>
      </div>
      <% } %>
    </div>
  </body>
    
  
<script>
  
  document.addEventListener('DOMContentLoaded', async () => {
    
  const alarmicon = document.querySelector('.material-symbols-outlined');
  const customtimedategroup = document.querySelector('.custom-time-date-group');
  alarmicon.addEventListener('click', () => {
  
    customtimedategroup.style.display = 'block';
  })
  })
  const close = document.querySelector('#_close');
  close.addEventListener('click', () => {
    document.getElementById('notepad').classList.remove('blur-background');
    document.getElementById('existingNotes').style.display = 'none';
    close.style.display = 'none';
  })
    // Add an event listener for checkbox changes
  document.querySelectorAll('.custom-check-input').forEach(checkbox => {
    checkbox.addEventListener('change', async (event) => {
      const todoId = event.target.id.replace('check', ''); // Extract todoId from the checkbox id
      const isChecked = event.target.checked;
  
      // Make an asynchronous request to update the completion status on the server
      try {
        await fetch(`/api/todos/${todoId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ completed: isChecked }),
        });
  
        // After updating the completion status, dynamically update the time left
        updateRemainingTime(todoId);
      } catch (error) {
        console.error('Error updating todo completion status:', error);
      }
    });
  });
  
    // Add an event listener for checkbox changes
    document.querySelectorAll('.custom-check-input').forEach(checkbox => {
      checkbox.addEventListener('change', async (event) => {
        const todoId = event.target.dataset.todoId;
        const isChecked = event.target.checked;
  
        // Make an asynchronous request to update the completion status on the server
        try {
          await fetch(`/api/todos/${todoId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ completed: isChecked }),
          });
          

          updateRemainingTime(todoId);
        } catch (error) {
          console.error('Error updating todo completion status:', error);
        }
      });
    });
  
    // Fetch and set initial todo completion status on page load
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch('/api/todos');
        const todos = await response.json();
  
        todos.forEach(todo => {
          const checkbox = document.getElementById(`check${todo._id}`);
          if (checkbox) {
            checkbox.checked = todo.completed;
          }
        });
      } catch (error) {
        console.error('Error fetching todo data:', error);
      }
    });
  
    // Function to dynamically update the remaining time
    async function updateRemainingTime(todoId) {
      try {
        const response = await fetch(`/api/todos/${todoId}`);
        const todo = await response.json();
  
        const timeDifference = new Date(todo.dateTime) - new Date();
        const hoursLeft = Math.floor(timeDifference / (60 * 60 * 1000));
        const minutesLeft = Math.floor((timeDifference % (60 * 60 * 1000)) / (60 * 1000));
  
        const timeLeftElement = document.querySelector(`#timeLeft${todo._id}`);
        if (timeLeftElement) {
          timeLeftElement.innerHTML = getTimeLeftString(hoursLeft, minutesLeft);
        }
      } catch (error) {
        console.error('Error fetching todo data:', error);
      }
    }
  
    // Function to generate the time left string based on hours and minutes
    function getTimeLeftString(hoursLeft, minutesLeft) {
      if (hoursLeft > 24) {
        const daysLeft = Math.floor(hoursLeft / 24);
        return `Time left: ${daysLeft} days`;
      }
      if (hoursLeft > 1) {
        return `Time left: ${hoursLeft} hours`;
      } else if (hoursLeft === 1) {
        return 'Time left: 1 hour';
      } else if (minutesLeft > 5) {
        return `Time left: ${minutesLeft} minutes`;
      } else if (minutesLeft < 5 && minutesLeft > 0) {
        return 'Time left: Few minutes left';
      } else {
        return 'Time left: ended';
      }
    }
</script>