<style>
  body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f5f5f5;
  }
  #noteTiztle{
    border: none;
    position: relative;
    left : 6px;
    gap: 10px;
  }
  #notes-section {
    margin: 0 auto;
    position: relative; /* Changed to relative */
    margin-top: 20px;
    background: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 90%;
    height: auto; /* Changed to auto */
    padding: 20px; /* Added padding */
    border-radius: 8px;
    display: flex; /* Added */
    flex-direction: column; /* Added */
    align-items: center; /* Added */
    z-index: 2; /* Ensure note stays above todo */

  }
  
  #notepad {
    padding-top: 5px;
    width: 90%;
    margin: 20px auto;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 8px;
    height: 129px;
    position: relative;
    z-index: 2; /* Ensure note stays above todo */
  }
  

  input#noteTitle {
    width: 100%;
    margin-bottom: 10px;
    padding: 10px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
    border: none;
    font-size: 16px;
  }

  input#noteTitle:focus {
    outline: none;
  }

  textarea {
    width: 100%;
    min-height: 437px;
    padding: 10px;
    box-sizing: border-box;
    border-radius: 4px;
    margin-bottom: 10px;
    resize: none;
    border: none;
    font-size: 14px;
  }

  textarea:focus {
    outline: none;
  }

  button {
    background-color: #3498db;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
  }

  button:hover {
    background-color: #2980b9;
  }

  
  /* TODO */
  
  
  .todo {
    justify-content: center;
    display: flex;
    position: relative;
    z-index: 1;  
  }
  .todo-item {
    display: flex;
    align-items: center;
  }

  .button-group {
    margin-left: 20px;
    display: flex;
    align-items: center;
  }

  .custom-todo-container {
      max-width: 400px;
      margin: 50px auto;
      text-align: center;
  }

  .custom-list-item {
          margin-bottom: 10px;
      padding: 15px;
      background-color: #fff;
      border: 1px solid #d6d6d6;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      transition: border-color 0.3s;
  }

  .custom-delete-btn,
  .custom-edit-btn,
  .custom-check-input {
      border: none;
      padding: 0.3rem 0.7rem;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 14px;
  }

  .custom-delete-btn {
      background-color: #dc3545;
      color: #fff;
  }

  .custom-edit-btn {
      background-color: #007bff;
      color: #fff;
  }

  .custom-check-input {
      right: 89px;
      appearance: none;
      position: relative;
      width: 20px;
      height: 20px;
      background-color: #fff;
      border: 1px solid #007bff;
      border-radius: 4px;
      margin-right: 10px;
      cursor: pointer;
      outline: none;
      transition: background-color 0.3s;
      display: inline-block;
      vertical-align: middle;
  }

  .custom-check-input:checked {
      background-color: #007bff;
  }

  .custom-check-mark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: #fff;
      border: 2px solid #007bff;
      display: none;
  }

  .custom-cross-logo {
      cursor: pointer;
      color: #dc3545;
      font-size: 18px;
      position: absolute;
      top: 50%;
      left: 79%;
      transform: translate(-50%, -50%);
      display: none;
  }

  .custom-list-item:hover {
      border-color: #007bff;
  }

  .custom-list-item.complete .custom-check-mark {
      display: block;
  }

  .custom-list-item:hover .custom-cross-logo {
      display: block;
  }

  .custom-input-group {
      margin-top: 15px  ;
      margin-bottom: 15px;
      display: flex;
      flex-direction: column;
      align-items: center;
  }

  .custom-todotext {
      flex: 1;
      width: 22rem;
      border: none;
      border-bottom: 1px solid #d6d6d6;
      margin-bottom: 10px;
      padding: 5px;
      font-size: 14px;
  }

  .custom-todotext:focus {
      outline: none;
      border-bottom: 1px solid #007bff;
  }

  .custom-date-time-input {
      margin-left: 2rem;
      width: 22rem;
      border: none;
      border-bottom: 1px solid #d6d6d6;
      margin-bottom: 10px;
      padding: 5px;
      font-size: 14px;
  }

  .custom-edit-btn,
  .custom-add-btn {
      margin-left: auto;
  }
  .custom-edit-all-btn {
      left: 95px;
      position: relative;
      background-color: #007bff;
      color: #fff;
      margin-bottom: 15px;
      padding: 0.3rem 0.7rem;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 14px;
  }

  .custom-time-date-group {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
  }

  @media (max-width: 1000px) {
      .custom-cross-logo {
          display: block;
          left: 70%;
      }
      .custom-todotext{
          width: 15rem;
      }
      .custom-date-time-input {
          width: 15rem;
      }
  }
  .custom-time-left {
      font-size: 12px;
      margin-bottom: 0;
      margin-top: 0;
      display: block;
      color: #222222;
      margin-left: auto;
  }
  
  .list-group-item {
      display: block !important;
      width: 350px !important;
  }
  .todotext{
      display: inline-block;
      margin-left: 20px;
      text-align: left;
      margin-bottom: 20px;
  }
  .custom-not-completed {
      color: red;
      position: relative;
      font-size: 10px;
  }
  .custom-completed {
    position: relative;
    font-size: 10px;
    right: 75px;
    color: rgb(15, 194, 15);
  }
  .custom-time-date-group{
    margin-right: 20px;
  }
  .custom-time-btn{
    margin-left: 20px;
    margin-right: 20px;
  }
  .custom-list-item{
    background: #575656!important;
    color: #fff;
  }
  .delete-btn-show{
    position: absolute;
    right: 1.2rem;
  }
  .custom-cross-logo{
    display: block;
  }
  .date-group,
.time-group {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.date-group label,
.time-group label {
  margin-right: 10px;
}
</style>
<!-- <form action="<%= note._id%>?_method=DELETE" class="delete-form form form-inline form-group" method="POST" class="delete-form">
  <button class="delete-btn-show btn btn-danger">Delete</button>
</form> -->
<div id="notepad">
  <form action="/user/note/<%= note._id %>?_method=PUT" method="POST" class="note-form form form-inline form-group">
    <div class="custom-page">
      <div class="custom-input-group mb-3">
        <div class="custom-time-date-group">
          <%
            const formatDateTime = (dateTime) => {
              const date = dateTime.toLocaleDateString('en-US', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
              }).replace(/\//g, '-');

              const [month, day, year] = date.split('-').map(part => part.padStart(2, '0'));

              const time = dateTime.toLocaleTimeString('en-US', {
                hour12: false,
                hour: '2-digit',
                minute: '2-digit'
              });

              return `${year}-${month}-${day}T${time}`;
            };

            const startTime = note.StartTime ? formatDateTime(new Date(note.StartTime)) : '';
            const endTime = note.EndTime ? formatDateTime(new Date(note.EndTime)) : '';
            console.log(startTime, endTime);
          %>


          <div class="custom-time-date-group">
            <div class="time-group">
              <div class="start">
                <label for="startTimeInput">Start Date and Time:</label>
                <input type="datetime-local" required id="startTimeInput" class="form-control-lg custom-date-time-input" name="StartTime" value ="<%= startTime %>" aria-label="Todo Start Time">
              </div>
              <div class="end">
                <label for="endTimeInput">End Date and Time:</label>
                <input type="datetime-local" required id="endTimeInput" class="form-control-lg custom-date-time-input" name="EndTime" value="<%= endTime %>" aria-label="Todo End Time">
              </div>
            </div>
          </div>
        </div>
        
      </div> 
    </div>
    <label class="custom-check-label" for="check<%= note._id %>">
      <input type="checkbox" id="check<%= note._id %>" class="custom-check-input" name="completed" <%= note.completed ? 'checked' : '' %>>
      <span class="custom-check-mark"></span>
    </label>
    <div class="notes-section" id="notes-section">
    <input type="text" id="noteTitle" name="title" placeholder="Title" value="<%= note.title %>">
    <textarea id="noteContent" placeholder="Start typing your note..." aria-placeholder="Start typing your note..." name="note"><%= note.note %></textarea>
    <button id="saveNote">Save</button>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    
    const todos = document.querySelectorAll('.custom-check-input');
    
    todos.forEach(checkbox => {
      checkbox.addEventListener('change', async (event) => {
        const todoId = event.target.id.replace('check', '');
        const isChecked = event.target.checked;
    
        try {
          await fetch(`/api/todos/${todoId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ completed: isChecked }),
          });
    
          updateRemainingTime(todoId);
        } catch (error) {
          console.error('Error updating todo completion status:', error);
        }
      });
    });

    try {
      const response = await fetch('/api/todos');
      const todosData = await response.json();
      
      todosData.forEach(todo => {
        const checkbox = document.getElementById(`check${todo._id}`);
        if (checkbox) {
          checkbox.checked = todo.completed;
        }
      });
    } catch (error) {
      console.error('Error fetching todo data:', error);
    }
  });

  async function updateRemainingTime(todoId) {
    try {
      const response = await fetch(`/api/todos/${todoId}`);
      const todo = await response.json();
  
      const timeDifference = new Date(todo.dateTime) - new Date();
      const hoursLeft = Math.floor(timeDifference / (60 * 60 * 1000));
      const minutesLeft = Math.floor((timeDifference % (60 * 60 * 1000)) / (60 * 1000));
  
      const timeLeftElement = document.querySelector(`#timeLeft${todo._id}`);
      if (timeLeftElement) {
        timeLeftElement.innerHTML = getTimeLeftString(hoursLeft, minutesLeft);
      }
    } catch (error) {
      console.error('Error fetching todo data:', error);
    }
  }
  
  function getTimeLeftString(hoursLeft, minutesLeft) {
    if (hoursLeft > 24) {
      const daysLeft = Math.floor(hoursLeft / 24);
      return `Time left: ${daysLeft} days`;
    }
    if (hoursLeft > 1) {
      return `Time left: ${hoursLeft} hours`;
    } else if (hoursLeft === 1) {
      return 'Time left: 1 hour';
    } else if (minutesLeft > 5) {
      return `Time left: ${minutesLeft} minutes`;
    } else if (minutesLeft < 5 && minutesLeft > 0) {
      return 'Time left: Few minutes left';
    } else {
      return 'Time left: ended';
    }
  }
</script>
