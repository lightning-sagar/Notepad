<% layout('/layout/boilerplate.ejs') %>

<style>
  body{
    display: flex;
  }
  #notepad {
    width: 90%;
    margin: 20px auto;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 8px;
    height: 600px;
    position: relative;
    font-family: 'Arial', sans-serif;
    left: 250px;
  }

  input#noteTitle {
    width: calc(100% - 20px);
    margin-bottom: 10px;
    padding: 10px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
    border: none;
    font-size: 18px;
    font-weight: bold;
    color: #333;
  }

  input#noteTitle:focus {
    outline: none;
  }

  textarea {
    width: calc(100% - 20px);
    min-height: 437px;
    padding: 10px;
    box-sizing: border-box;
    border-radius: 4px;
    margin-bottom: 10px;
    resize: none;
    border: none;
    font-size: 16px;
    color: #555;
  }

  textarea:focus {
    outline: none;
  }

  button {
    background-color: #3498db;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
  }

  button:hover {
    background-color: #2980b9;
  }

  form.delete-form {
    position: absolute;
    top: 20px;
    right: 20px;
  }

  form.delete-form button {
    background-color: #e74c3c;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
  }

  form.delete-form button:hover {
    background-color: #c0392b;
  }

    /* TODO */
  
  
    .todo {
      display: none;
      justify-content: center;
      position: relative;
      z-index: 1;  
    }
    .todo-item {
      display: flex;
      align-items: center;
    }
  
    .button-group {
      margin-left: 20px;
      display: flex;
      align-items: center;
    }
  
    .custom-todo-container {
        max-width: 400px;
        margin: 50px auto;
        text-align: center;
    }
  
    .custom-list-item {
            margin-bottom: 10px;
        padding: 15px;
        background-color: #fff;
        border: 1px solid #d6d6d6;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        transition: border-color 0.3s;
    }
  
    .custom-delete-btn,
    .custom-edit-btn,
    .custom-check-input {
        border: none;
        padding: 0.3rem 0.7rem;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 14px;
    }
  
    .custom-delete-btn {
        background-color: #dc3545;
        color: #fff;
    }
  
    .custom-edit-btn {
        background-color: #007bff;
        color: #fff;
    }
  
    .custom-check-input {
        right: 89px;
        appearance: none;
        position: relative;
        width: 20px;
        height: 20px;
        background-color: #fff;
        border: 1px solid #007bff;
        border-radius: 4px;
        margin-right: 10px;
        cursor: pointer;
        outline: none;
        transition: background-color 0.3s;
        display: inline-block;
        vertical-align: middle;
    }
  
    .custom-check-input:checked {
        background-color: #007bff;
    }
  
    .custom-check-mark {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: #fff;
        border: 2px solid #007bff;
        display: none;
    }
  
    .custom-cross-logo {
        cursor: pointer;
        color: #dc3545;
        font-size: 18px;
        position: absolute;
        left: 60%;
        transform: translate(-50%, -50%);
    }
  
    .custom-list-item:hover {
        border-color: #007bff;
    }
  
    .custom-list-item.complete .custom-check-mark {
        display: block;
    }
  
    .custom-list-item:hover .custom-cross-logo {
        display: block;
    }
  
    .custom-input-group {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
  
    .custom-todotext {
        flex: 1;
        width: 22rem;
        border: none;
        border-bottom: 1px solid #d6d6d6;
        margin-bottom: 10px;
        padding: 5px;
        font-size: 14px;
    }
  
    .custom-todotext:focus {
        outline: none;
        border-bottom: 1px solid #007bff;
    }
  
    .custom-date-time-input {
        margin-left: 2rem;
        width: 22rem;
        border: none;
        border-bottom: 1px solid #d6d6d6;
        margin-bottom: 10px;
        padding: 5px;
        font-size: 14px;
    }
  
    .custom-edit-btn,
    .custom-add-btn {
        margin-left: auto;
    }
    .custom-edit-all-btn {
        left: 95px;
        position: relative;
        background-color: #007bff;
        color: #fff;
        margin-bottom: 15px;
        padding: 0.3rem 0.7rem;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 14px;
    }
  
    .custom-time-date-group {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
  
    @media (max-width: 1000px) {
        .custom-cross-logo {
            display: block;
            left: 70%;
        }
        .custom-todotext{
            width: 15rem;
        }
        .custom-date-time-input {
            width: 15rem;
        }
    }
    .custom-time-left {
        font-size: 12px;
        margin-bottom: 0;
        margin-top: 0;
        display: block;
        color: #222222;
    }
    
    .list-group-item {
        display: block !important;
        width: 350px !important;
    }
    .todotext{
        display: inline-block;
        margin-left: 20px;
        text-align: left;
        margin-bottom: 20px;
    }
    .custom-not-completed {
        color: red;
        position: relative;
        font-size: 10px;
    }
    .custom-completed {
      position: relative;
      font-size: 10px;
      right: 75px;
      color: rgb(15, 194, 15);
    }
    .custom-time-date-group{
      margin-right: 20px;
      display: none;
    }
    .custom-time-btn{
      margin-left: 20px;
      margin-right: 20px;
    }
    .custom-list-item{
      background: #575656!important;
      color: #fff;
    }

    /*arrow*/
    .back-arrow{
      text-align: center;
      margin-top: 20px;
      right: 0;
      top: 50%;
      position: absolute;
      cursor: pointer;
      display: none;
    }
    .front-arrow {
      text-align: center;
      margin-top: 20px;
      right: 0;
      top: 50%;
      position: absolute;
      cursor: pointer;
    }
    .custom-todo-btn {
      width: 400px;
      height: 500px;
      display: flex;
      justify-content: center;
      align-items: center;  
      background: red;
      margin: 0 auto; 
      top: 200px;
      right: 40px;
      position: absolute;
    }
    .custom-page{
      display:flex;
    }
    .todo-sec{
      width: 55%;
    }
</style>
<div class="custom-page">
  <div id="notepad">
    <form action="<%= note._id %>?_method=PUT" method="POST" class="note-form form form-inline form-group">
      <input type="text" id="noteTitle" name="title" placeholder="Title" value="<%= note.title %>">
      <textarea id="noteContent" placeholder="Start typing your note..." aria-placeholder="Start typing your note..." name="note"><%= note.note %></textarea>
      <button id="saveNote">Save</button>
    </form>
    <form action="<%= note._id%>?_method=DELETE" method="POST" class="delete-form">
      <button>Delete</button>
    </form>
  </div>
  
  <div class="front-arrow">
    <span class="material-symbols-outlined">
      arrow_back_ios
      </span>
  </div>
  <div class="back-arrow ">
    <span class="material-symbols-outlined">
      arrow_forward_ios
      </span>
  </div>
  <div class="todo-sec">
    <div class="todo">
      <div class="todo-name">
        <div class="container custom-todo-container">
          <h1 class="text-center mb-4">Todo List</h1>
          <div class="custom-input-group mb-3">
              <form id="todoForm" action="/todoadd" method="post" class="d-flex align-items-center">
                  <input type="text" id="todoInput" required class="form-control-lg custom-todotext" name="text" placeholder="Add a new todo" aria-label="Add a new todo" aria-describedby="addTodoBtn">
                  <span class="material-symbols-outlined custom-time-btn" style="cursor: pointer;">
                    notification_add
                    </span>
                  <div class="custom-time-date-group">
                    <input type="datetime-local" required placeholder="Add reminder" id="dateTimeInput" class="form-control-lg custom-date-time-input" name="dateTime" aria-label="Todo Date and Time">
                  </div>
                  <button class="btn btn-primary custom-add-btn" type="submit" id="addTodoBtn">Add</button>
              </form>
          </div>
          <ul class="list-group list-group-flush">
    
        <% (async () => {%>
          
          <ul class="list-group list-group-flush">     
            <% associatedTodos.forEach(todo => { %>
                        
                        <% console.log('Associated Todos:', JSON.stringify(associatedTodos)) %>
    
                        <% console.log('Associated Todos:', JSON.stringify(associatedTodos)) %>
    
    
                        <% const timeDifference = new Date(todo.dateTime) - new Date() %>
                        <% const hoursLeft = Math.floor(timeDifference / (60 * 60 * 1000)) %>
                        <% const minutesLeft = Math.floor((timeDifference % (60 * 60 * 1000)) / (60 * 1000)) %>
                        <% if (todo.completed) { %>
                          <p class="custom-completed">Completed</p>
                        <% }else { %>
                          <p class="custom-not-completed">Not Completed</p>
                        <% } %>
                      
                      <div class="todo-item">
                        <div class="todotext"><%= todo.text %></div>
                        <div class="button-group">
                            <form action="/user/<%= note._id%>/todos/<%= todo._id %>/edit" method="GET">
                                <button class="custom-edit-all-btn" type="submit">Edit</button>
                            </form>
                    
                            <form action="/user/<%= note._id%>/todos/<%= todo._id %>?_method=DELETE" method="POST">
                                <input type="hidden" name="_method" value="DELETE">
                                <div class="custom-cross-logo" onclick="confirm('Are you sure you want to delete this todo?') && this.parentElement.submit()">
                                    &#10006; 
                                </div>
                            </form>
                        </div>
                    </div>
                    <% if (todo.dateTime) { %>
                      <p class="custom-time-left">
                        <% if (hoursLeft >= 24) { %>
                          <% const daysLeft = Math.floor(hoursLeft / 24) %>
                          <% const remainingHours = hoursLeft % 24 %>
                          <% if (daysLeft === 1) { %>
                            <p class="custom-time-left" style="color: rgb(255, 255, 255);"> Time left: 1 day <%= remainingHours > 0 ? `and ${remainingHours} hours` : '' %></p>
                          <% } else { %>
                            <p class="custom-time-left" style="color: rgb(255, 255, 255);"> Time left: <%= daysLeft %> days <%= remainingHours > 0 ? `and ${remainingHours} hours` : '' %></p>
                          <% } %>
                        <% } else if (hoursLeft > 1) { %>
                          <% const remainingMinutes = minutesLeft % 60; %>
                          <% if (hoursLeft === 1) { %>
                            <p class="custom-time-left" style="color: rgb(225, 255, 0);"> Time left: 1 hour <%= remainingMinutes > 0 ? `and ${remainingMinutes} minutes` : '' %></p>
                          <% } else { %>
                            <p class="custom-time-left" style="color: rgb(255, 255, 0);">Time left: <%= hoursLeft %> hours <%= remainingMinutes > 0 ? `and ${remainingMinutes} minutes` : '' %></p>
                          <% } %>
                        <% } else if (hoursLeft === 1) { %>
                          <p class="custom-time-left" style="color: rgb(255, 106, 0);"> Time left: 1 hour</p>
                        <% } else if (minutesLeft > 5) { %>
                          <p class="custom-time-left" style="color: red;">Time left: <%= minutesLeft %> minutes</p>
                        <% } else if (minutesLeft > 0) { %>
                          <p class="custom-time-left" style="color: red;">Time left: Few minutes left</p> 
                        <% } else { %>
                          <p class="custom-time-left" style="color: red;">Time left: ended</p>
                        <% } %>
                      </p>
                    <% } %>
                  </li>
              <% }) %>
          </ul>
        </div>
        <% })() %>
      </div>
    </div>
  </div>
  
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
  // for arrow...
    const notepad = document.querySelector('#notepad');
  const arrow = document.querySelector('.front-arrow');
  const barrow = document.querySelector('.back-arrow');
  const todo = document.querySelector('.todo');
  arrow.addEventListener('click', () => {
    todo.style.display = 'block';
    notepad.style.width = '40%';
    notepad.style.left = '0px';
    notepad.style.marginLeft = '-89px';
    arrow.style.display = 'none';
    barrow.style.display = 'block';
  })
  barrow.addEventListener('click', () => {
    todo.style.display = 'none';
    notepad.style.width = '90%';
    notepad.style.marginLeft = '0px';
    notepad.style.left = '250px';
    arrow.style.display = 'block';
    barrow.style.display = 'none';
  })



      const alarmicon = document.querySelector('.material-symbols-outlined');
      const customtimedategroup = document.querySelector('.custom-time-date-group');
      alarmicon.addEventListener('click', () => {
      
        customtimedategroup.style.display = 'block';
      })
  })
    // Add an event listener for checkbox changes
  document.querySelectorAll('.custom-check-input').forEach(checkbox => {
    checkbox.addEventListener('change', async (event) => {
      const todoId = event.target.id.replace('check', '') // Extract todoId from the checkbox id
      const isChecked = event.target.checked
  
      // Make an asynchronous request to update the completion status on the server
      try {
        await fetch(`/api/todos/${todoId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ completed: isChecked }),
        });
  
        // After updating the completion status, dynamically update the time left
        updateRemainingTime(todoId);
      } catch (error) {
        console.error('Error updating todo completion status:', error);
      }
    });
  });
  
    // Add an event listener for checkbox changes
    document.querySelectorAll('.custom-check-input').forEach(checkbox => {
      checkbox.addEventListener('change', async (event) => {
        const todoId = event.target.id.replace('check', '');
        const isChecked = event.target.checked;
    
        try {
          await fetch(`/api/todos/${todoId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ completed: isChecked }),
          });
    
          // After updating the completion status, dynamically update the time left
          updateRemainingTime(todoId);
        } catch (error) {
          console.error('Error updating todo completion status:', error);
        }
      });
    });
  
    // Fetch and set initial todo completion status on page load
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch('/api/todos');
        const todos = await response.json();
        console.log('Todos:', todos);
        todos.forEach(todo => {
          const checkbox = document.getElementById(`check${todo._id}`);
          if (checkbox) {
            checkbox.checked = todo.completed;
          }
        });
      } catch (error) {
        console.error('Error fetching todo data:', error);
      }
    });
  
    // Function to dynamically update the remaining time
    async function updateRemainingTime(todoId) {
      try {
        const response = await fetch(`/api/todos/${todoId}`);
        const todo = await response.json();
  
        const timeDifference = new Date(todo.dateTime) - new Date();
        const hoursLeft = Math.floor(timeDifference / (60 * 60 * 1000));
        const minutesLeft = Math.floor((timeDifference % (60 * 60 * 1000)) / (60 * 1000));
  
        const timeLeftElement = document.querySelector(`#timeLeft${todo._id}`);
        if (timeLeftElement) {
          timeLeftElement.innerHTML = getTimeLeftString(hoursLeft, minutesLeft);
        }
      } catch (error) {
        console.error('Error fetching todo data:', error);
      }
    }
  
    // Function to generate the time left string based on hours and minutes
    function getTimeLeftString(hoursLeft, minutesLeft) {
      if (hoursLeft > 24) {
        const daysLeft = Math.floor(hoursLeft / 24);
        return `Time left: ${daysLeft} days`;
      }
      if (hoursLeft > 1) {
        return `Time left: ${hoursLeft} hours`;
      } else if (hoursLeft === 1) {
        return 'Time left: 1 hour';
      } else if (minutesLeft > 5) {
        return `Time left: ${minutesLeft} minutes`;
      } else if (minutesLeft < 5 && minutesLeft > 0) {
        return 'Time left: Few minutes left';
      } else {
        return 'Time left: ended';
      }
    }
</script>